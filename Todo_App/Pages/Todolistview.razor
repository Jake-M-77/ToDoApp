@page "/todolistview"

@inject ToDoService ToDoService
@inject NavigationManager NavigationManager

<PageTitle>Your To-Do List</PageTitle>

<h1 style="text-align: center;">Your To-Do List</h1>

@if (tasks == null)
{
    <p>Awaiting todos</p>
}
else
{
    <table>
        <thead style="border: 1px solid black; background-color: grey;">
            <tr>
                <td>Task ID</td>
                <td>Taskname</td>
                <td>Task Time</td>
                <td>Task Completed</td>
                <td>TESTTTT</td>
            </tr>

        </thead>

        <tbody>

            @foreach (var task in tasks)
            {
                @* This is part of a thing that is being built to allow a soft color to be applied to the todos background
                that will be either green,orange,red. it will allow a quick glance to see what is due soon. *@
                double counter;
                counter = (task.dateTime - timenow).TotalDays;

                int timeRemaining = Convert.ToInt32(counter);
                Console.WriteLine($"TASKID:{task.Id} - {timeRemaining}");
                @if(timeRemaining > 22)
                {
                    Console.WriteLine($"{task.Id} has 21+ days remaining");
                    <tr style="background-color: rgb(110, 30, 238);" @onclick='() => NavigationManager.NavigateTo($"/todoeditor/{task.Id}")'>
                    <td>@task.Id</td>
                    <td>@task.Name</td>
                    <td>@task.dateTime</td>
                    <td>@(task.IsCompleted == true ? "Yes" : "No")</td>
                    <td>@timeRemaining</td>
                    </tr>
                }
                else if(timeRemaining > 21)
                {
                    Console.WriteLine($"{task.Id} has 21 days remaining");
                    <tr style="background-color: lightgreen;" @onclick='() => NavigationManager.NavigateTo($"/todoeditor/{task.Id}")'>
                    <td>@task.Id</td>
                    <td>@task.Name</td>
                    <td>@task.dateTime</td>
                    <td>@(task.IsCompleted == true ? "Yes" : "No")</td>
                    <td>@timeRemaining</td>
                    </tr>
                }
                else if(timeRemaining > 14)
                {
                    Console.WriteLine($"{task.Id} has 14 days remaining");
                    <tr style="background-color: orange;" @onclick='() => NavigationManager.NavigateTo($"/todoeditor/{task.Id}")'>
                    <td>@task.Id</td>
                    <td>@task.Name</td>
                    <td>@task.dateTime</td>
                    <td>@(task.IsCompleted == true ? "Yes" : "No")</td>
                    <td>@timeRemaining</td>
                    </tr>
                }
                else if(timeRemaining > 7)
                {
                    Console.WriteLine($"{task.Id} has 7 days remaining");
                    <tr style="background-color: lightcoral;" @onclick='() => NavigationManager.NavigateTo($"/todoeditor/{task.Id}")'>
                    <td>@task.Id</td>
                    <td>@task.Name</td>
                    <td>@task.dateTime</td>
                    <td>@(task.IsCompleted == true ? "Yes" : "No")</td>
                    <td>@timeRemaining</td>
                    </tr>
                }
                else if(timeRemaining < -1)
                {
                    Console.WriteLine($"{task.Id} is overdue");
                    <tr style="background-color: rgb(240, 54, 54);" @onclick='() => NavigationManager.NavigateTo($"/todoeditor/{task.Id}")'>
                    <td>@task.Id</td>
                    <td>@task.Name</td>
                    <td>@task.dateTime</td>
                    <td>@(task.IsCompleted == true ? "Yes" : "No")</td>
                    <td>@timeRemaining</td>
                    </tr>
                }
                


                @* <tr @onclick='() => NavigationManager.NavigateTo($"/todoeditor/{task.Id}")'>
                    <td>@task.Id</td>
                    <td>@task.Name</td>
                    <td>@task.dateTime</td>
                    <td>@(task.IsCompleted == true ? "Yes" : "No")</td>
                    <td>@timeRemaining</td>
                </tr> *@

            }

        </tbody>
    </table>

}



@code {
    public DateTime timenow = DateTime.Now;
    public List<ToDo> tasks { get; set; } = new List<ToDo>();

    public async Task LoadToDos()
    {
        tasks = await ToDoService.GetUncompletedToDos();
    }


    protected override async Task OnInitializedAsync()
    {
        await LoadToDos();
    }
}