@page "/todolistview"

@inject ToDoService ToDoService
@inject NavigationManager NavigationManager

<PageTitle>Your To-Do List</PageTitle>

<h1 style="text-align: center;">Your To-Do List</h1>

<div>
    <InputText @bind-Value="searchToDos" placeholder="Search Todos" />
</div>

@if (tasks == null)
{
    <p>Awaiting todos</p>
}
else
{
    <table>
        <thead style="border: 1px solid black; background-color: grey;">
            <tr>
                <td>Task ID</td>
                <td>Taskname</td>
                <td>Task Time</td>
                <td>Task Completed</td>
                <td>TESTTTT</td>
            </tr>

        </thead>

        <tbody>

            @foreach (var task in tasks.Where(x => string.IsNullOrEmpty(searchToDos) || x.Name.Contains(searchToDos, StringComparison.OrdinalIgnoreCase)))
            {
                @* This is part of a thing that is being built to allow a soft color to be applied to the todos background
                that will be either green,orange,red. it will allow a quick glance to see what is due soon. *@

                int timeRemaining = Convert.ToInt32((task.dateTime - timenow).TotalDays);

                //Purely for debug purposes **REMOVE WHEN NOT NEEDED**
                Console.WriteLine($"TASKID:{task.Id} - {timeRemaining}");

                <tr style="background-color: @GetRowColour(timeRemaining)"
                    @onclick='() => NavigationManager.NavigateTo($"/todoeditor/{task.Id}")'>
                    <td>@task.Id</td>
                    <td>@task.Name</td>
                    <td>@task.dateTime</td>
                    <td>@(task.IsCompleted == true ? "Yes" : "No")</td>
                    <td>@timeRemaining</td>
                </tr>

            }

        </tbody>
    </table>

}



@code {
    public DateTime timenow = DateTime.Now;
    public List<ToDo> tasks { get; set; } = new List<ToDo>();

    public string searchToDos { get; set; }


    public string rowColour;

    public async Task LoadToDos()
    {
        tasks = await ToDoService.GetUncompletedToDos();
    }


    protected override async Task OnInitializedAsync()
    {
        await LoadToDos();
    }

    private string GetRowColour(double timeRemaining)
    => timeRemaining > 22 ? "rgb(110, 30, 238)" :
    timeRemaining > 21 ? "lightgreen" :
    timeRemaining > 14 ? "orange" :
    timeRemaining > 7 ? "lightcoral" :
    timeRemaining > 0 ? "red" :
    timeRemaining <= -1 ? "purple" :
    "white";

}