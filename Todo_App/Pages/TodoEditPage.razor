@page "/todoeditor/{Id:int}" 

@inject ToDoService ToDoService
@inject NavigationManager NavigationManager

@if(AppendToDo == null)
{
    <p>Error Occured!</p>
}
else
{
    <EditForm Model="AppendToDo" OnValidSubmit="UpdateToDo">

        <InputText @bind-Value="AppendToDo.Name"/>
        <InputDate @bind-Value="AppendToDo.dateTime" />
        <label>Task Completed?: </label>
        <InputCheckbox @bind-Value="AppendToDo.IsCompleted" />

        <button class="btn btn-success">Update ToDo</button>

    </EditForm>
}



@code{
    [Parameter]
    public int Id { get; set;}

    ToDo AppendToDo = new ToDo();
    

    public async Task GetToDo(int Id)
    {
        AppendToDo = await ToDoService.ShowToDoById(Id);
    }

    public async Task UpdateToDo()
    {
        AppendToDo.dateTime = DateTime.SpecifyKind(AppendToDo.dateTime, DateTimeKind.Local).ToUniversalTime();

        var response = await ToDoService.UpdateToDo(AppendToDo);
        if(response)
        {
            Console.WriteLine("ToDo updated successfully!");
            NavigationManager.NavigateTo("/todolistview");
        }
        else
        {
            Console.WriteLine($"Error: {response.ToString()}");
        }

        
    }

    protected override async Task OnInitializedAsync()
    {
        await GetToDo(Id);
    }
}
