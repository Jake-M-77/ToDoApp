@page "/todoeditor/{Id:int}" 

@inject ToDoService ToDoService
@inject NavigationManager NavigationManager

@if(AppendToDo == null)
{
    <p>Error Occured!</p>
}
else
{
    <div>

        <EditForm Model="AppendToDo" OnValidSubmit="UpdateToDo">
            <DataAnnotationsValidator />
            <ValidationSummary />

        <label>To-Do Name:</label>
            <InputText @bind-Value="AppendToDo.Name"/>
        <br>
        <label>To-Do Due Date:</label>
        <InputDate @bind-Value="AppendToDo.dateTime" />
        <br>
        <label>Task Completed?: </label>
        
        <InputCheckbox @bind-Value="AppendToDo.IsCompleted" />
        <br>
        <InputTextArea @bind-Value="AppendToDo.Notes" />
        <br>

        <button class="btn btn-success">Update ToDo</button>

        </EditForm>

        <button class="btn btn-danger" @onclick="(() => DeleteToDo(Id))">Delete ToDo</button>

    </div>
    
}



@code{
    [Parameter]
    public int Id { get; set;}

    ToDo AppendToDo = new ToDo();
    

    public async Task GetToDo(int Id)
    {
        AppendToDo = await ToDoService.ShowToDoById(Id);
    }
    public async Task DeleteToDo(int Id)
    {
        await ToDoService.DeleteToDo(Id);
        //redirect back to todo list once todo delete
        NavigationManager.NavigateTo("/todolistview");
        
    }

    public async Task UpdateToDo()
    {
        var response = await ToDoService.UpdateToDo(AppendToDo);
        if(response)
        {
            Console.WriteLine("ToDo updated successfully!");
            NavigationManager.NavigateTo("/todolistview");
        }
        else
        {
            Console.WriteLine($"Error: {response.ToString()}");
        }

        
    }

    protected override async Task OnInitializedAsync()
    {
        await GetToDo(Id);
    }
}
